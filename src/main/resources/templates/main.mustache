<!DOCTYPE html>
<html>
<head>
    <title>VPNMan</title>
</head>
<body>

<h1>VPN</h1>

<button id="connect">Connect</button>
<button id="disconnect">Disconnect</button>

<div id="status"></div>
<!--
<table>
    <thead>
    <tr>
        <th>VPN</th>
        <th>Name</th>
        <th>Address</th>
    </tr>
    </thead>
    <tbody>
    {{#hosts}}
    <tr>
        <td><input name="host" value="{{ address }}" type="checkbox" {{#checked}}checked{{/checked}}></td>
        <td>{{#name}}{{ name }}{{/name}}</td>
        <td>{{ address }}</td>
    </tr>
    {{/hosts}}
    </tbody>
</table>
-->
<script>
    // document.addEventListener("load", () => {
        const connectBtn = document.getElementById("connect");
        const disconnectBtn = document.getElementById("disconnect");
        const status = document.getElementById("status");

        function parseNDJson() {
            let ndjsonBuffer = '';
            return new TransformStream({
                transform: (chunk, controller) => {
                    ndjsonBuffer += chunk;

                    const jsonValues = ndjsonBuffer.split("\n");
                    jsonValues.slice(0, -1).forEach(value => controller.enqueue(JSON.parse(value)));

                    ndjsonBuffer = jsonValues[jsonValues.length - 1];
                },
                flush: (controller) => {
                    if (ndjsonBuffer) {
                        controller.enqueue(JSON.parse(ndjsonBuffer));
                    }
                }
            });
        }

        function processStatusUpdateStream(statusUpdateReader) {
            statusUpdateReader.read().then(result => {
                if (!result.done) {
                    if (result.value.status === 500) {
                        status.innerHTML = `<pre>${result.value.trace}</pre>`;
                    }
                    switch (result.value.status) {
                        case 'connected':
                            connectBtn.setAttribute("disabled", "true");
                            disconnectBtn.removeAttribute("disabled");
                            break;
                        case 'disconnected':
                            connectBtn.removeAttribute("disabled");
                            disconnectBtn.setAttribute("disabled", "true");
                            break;
                        case 'connecting':
                            connectBtn.setAttribute("disabled", "true");
                            disconnectBtn.setAttribute("disabled", "true");
                            break;
                        case 'disconnecting':
                            connectBtn.setAttribute("disabled", "true");
                            disconnectBtn.setAttribute("disabled", "true");
                            break;
                    }
                    if (result.value.message) {
                        status.textContent = result.value.message;
                    }
                    console.log(result.value);

                    // recurse
                    processStatusUpdateStream(statusUpdateReader);
                }
            })
        }

        connectBtn.addEventListener("click", () => {
            fetch("/api/connect", {method: 'POST'}).then(response => {
                const statusUpdates = response.body.pipeThrough(new TextDecoderStream()).pipeThrough(parseNDJson());
                processStatusUpdateStream(statusUpdates.getReader());
            });
        });

        disconnectBtn.addEventListener("click", () => {
            fetch("/api/disconnect", {method: 'POST'}).then(response => {
                const statusUpdates = response.body.pipeThrough(new TextDecoderStream()).pipeThrough(parseNDJson());
                processStatusUpdateStream(statusUpdates.getReader());
            })
        })
   //  });
</script>
</body>
</html>
