<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>VPNMan</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
</head>
<body>

<div class="container">
    <h1>VPN</h1>

    <div class="my-3">
        <button id="connect">Connect</button>
        <button id="disconnect">Disconnect</button>
    </div>
    <div class="card card-body">
        <div id="status">Ok</div>
    </div>

    <div class="my-3">
        <a id="advanced-toggle" href="#advanced">Advanced settings</a>
        <div class="collapse" id="advanced">
            <div class="card card-body">
                <h1>Select VPN users</h1>
                <table>
                    <thead>
                    <tr>
                        <th>VPN</th>
                        <th>Name</th>
                        <th>Address</th>
                    </tr>
                    </thead>
                    <tbody>
                    {{#hosts}}
                    <tr>
                        <td><input name="host" value="{{ address }}" type="checkbox" {{#checked}}checked{{/checked}}></td>
                        <td>{{#name}}{{ name }}{{/name}}</td>
                        <td>{{ address }}</td>
                    </tr>
                    {{/hosts}}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<script>
        const connectBtn = document.getElementById("connect");
        const disconnectBtn = document.getElementById("disconnect");
        const status = document.getElementById("status");
        const advancedBtn = document.getElementById("advanced-toggle");
        const advancedPanel = document.getElementById("advanced");


        function parseNDJson() {
            let ndjsonBuffer = '';
            return new TransformStream({
                transform: (chunk, controller) => {
                    ndjsonBuffer += chunk;

                    const jsonValues = ndjsonBuffer.split("\n");
                    jsonValues.slice(0, -1).forEach(value => controller.enqueue(JSON.parse(value)));

                    ndjsonBuffer = jsonValues[jsonValues.length - 1];
                },
                flush: (controller) => {
                    if (ndjsonBuffer) {
                        controller.enqueue(JSON.parse(ndjsonBuffer));
                    }
                }
            });
        }

        function processStatusUpdateStream(statusUpdateReader) {
            statusUpdateReader.read().then(result => {
                if (!result.done) {
                    if (result.value.status === 500) {
                        status.innerHTML = `<pre>${result.value.trace}</pre>`;
                    }
                    switch (result.value.status) {
                        case 'CONNECTED':
                            connectBtn.setAttribute("disabled", "true");
                            disconnectBtn.removeAttribute("disabled");
                            break;
                        case 'DISCONNECTED':
                            connectBtn.removeAttribute("disabled");
                            disconnectBtn.setAttribute("disabled", "true");
                            break;
                        case 'CONNECTING':
                            connectBtn.setAttribute("disabled", "true");
                            disconnectBtn.setAttribute("disabled", "true");
                            break;
                        case 'DISCONNECTING':
                            connectBtn.setAttribute("disabled", "true");
                            disconnectBtn.setAttribute("disabled", "true");
                            break;
                    }
                    if (result.value.message) {
                        status.textContent = result.value.message;
                    }
                    console.log(result.value);

                    // recurse
                    processStatusUpdateStream(statusUpdateReader);
                }
            });
        }

        connectBtn.addEventListener("click", () => {
            fetch("/api/connect", {method: 'POST'}).then(response => {
                const statusUpdates = response.body.pipeThrough(new TextDecoderStream()).pipeThrough(parseNDJson());
                processStatusUpdateStream(statusUpdates.getReader());
            });
        });

        disconnectBtn.addEventListener("click", () => {
            fetch("/api/disconnect", {method: 'POST'}).then(response => {
                const statusUpdates = response.body.pipeThrough(new TextDecoderStream()).pipeThrough(parseNDJson());
                processStatusUpdateStream(statusUpdates.getReader());
            });
        });

    advancedBtn.addEventListener("click", () => {
        if (advancedPanel.classList.contains("show")) {
            advancedPanel.classList.remove("show");
        } else {
            advancedPanel.classList.add("show");
        }
    });
</script>
</body>
</html>
